classdef SkewCorrModule < handle
% SkewCorrModule
% =========================================================================
% A fully fleshed-out MATLAB class for a "Skewness Correction" preprocessing
% step in NeuroMiner (NM), demonstrating:
%   1) Configuration: calls nk_SkewCorr_config
%   2) Perform: calls nk_PerfSkewCorrObj
%   3) Description: similar to nk_GetParamDescription2 snippet
%
% PROPERTIES:
%   name         : unique identifier for this module ('skewcorr')
%   stepParams   : struct storing user-chosen parameters from config (SKW, PX, etc.)
%
% METHODS:
%   configFcn()       : calls nk_SkewCorr_config to configure the step
%   performFcn(Y)     : calls nk_PerfSkewCorrObj on data Y
%   descriptionFcn()  : returns a display string, akin to nk_GetParamDescription
%
% Example:
%   SCM = SkewCorrModule();
%   SCM.configFcn();              % user sets transformMethod, SkewThr, ...
%   [Ycorr, paramOut] = SCM.performFcn(Yraw);
%   disp(SCM.descriptionFcn());
% ===================================================================================
% (c) Nikolaos Koutsouleris, 04/2025

    properties
        name = 'skewcorr'          % Unique name/identifier
        stepParams = struct();     % Will store config from nk_SkewCorr_config
                                   % e.g., .transformMethod, .SkewThr, .PX, etc.
    end

    methods

        % --------------------- Constructor -----------------------
        function obj = SkewCorrModule(initialParams)
            % Optional constructor: user can provide an initial struct
            if nargin > 0
                obj.stepParams = initialParams;
            end
        end

        % --------------------- Config Fcn ------------------------
        function configFcn(obj)
            % configFcn: calls nk_SkewCorr_config to let the user define
            % parameters for Skewness Correction (transformMethod, SkewThr, etc.)
            %
            % We'll assume your signature for nk_SkewCorr_config is:
            %   [SKW, PX, act] = nk_SkewCorr_config(SKW, PX, parentstr, defaultsfl)
            % Here, we'll pass in obj.stepParams if it has existing fields.

            fprintf('\n--- Configuring the %s module ---\n', obj.name);

            % Prepare input for nk_SkewCorr_config
            if ~isfield(obj.stepParams, 'SKW'), obj.stepParams.SKW = []; end
            if ~isfield(obj.stepParams, 'PX'),  obj.stepParams.PX  = []; end

            % Call the config function. Adjust the parentstr or defaults as needed.
            parentstr = 'SkewCorr Module';
            defaultsfl = false;  % set true if you want no user interaction
            [SKW, PX, act] = nk_SkewCorr_config(obj.stepParams.SKW, obj.stepParams.PX, parentstr, defaultsfl);

            % Store them in obj.stepParams for later use
            obj.stepParams.SKW = SKW;
            obj.stepParams.PX  = PX;

            fprintf('Configuration done. transformMethod = %s, SkewThr= %g\n', ...
                SKW.transformMethod, SKW.SkewThr);
        end

        % --------------------- Perform Fcn -----------------------
        function [Yout, stepParamsOut] = performFcn(obj, Y)
            % performFcn: apply skewness correction to data Y
            %
            % We call nk_PerfSkewCorrObj(Y, IN), where IN is the SKW struct
            % from obj.stepParams.SKW. That function should return
            %   [Yout, updatedParams] = nk_PerfSkewCorrObj(Y, IN)
            %
            % We'll store those results back in obj.stepParams if needed.

            fprintf('\n--- Performing %s on data ---\n', obj.name);

            if ~isfield(obj.stepParams,'SKW') || isempty(obj.stepParams.SKW)
                error('SkewCorrModule: stepParams.SKW not configured. Call configFcn() first.');
            end

            IN = obj.stepParams.SKW;
            % Suppose your nk_PerfSkewCorrObj signature is:
            %   [Ycorr, updatedIN] = nk_PerfSkewCorrObj(Y, IN);
            [Ycorr, updatedIN] = nk_PerfSkewCorrObj(Y, IN);

            % Store updated parameters in the object (in case reversion or referencing is needed)
            obj.stepParams.SKW = updatedIN;

            Yout = Ycorr;
            stepParamsOut = updatedIN;

            fprintf('Skewness correction done. Method=%s, SkewThr=%g\n', ...
                updatedIN.transformMethod, updatedIN.SkewThr);
        end

        % --------------------- Description Fcn -------------------
        function descStr = descriptionFcn(obj)
            % descriptionFcn: returns a display string akin to the snippet
            % from nk_GetParamDescription2.m for 'skewcorr'.
            %
            % We'll replicate the logic of your snippet:
            %   case 'skewcorr' => build a text like
            %      'Skewness correction [ Method: <method>, Threshold: <thr>, ...]'

            if ~isfield(obj.stepParams,'SKW') || isempty(obj.stepParams.SKW)
                descStr = sprintf('[%s] Skewness Correction: no configuration set.', obj.name);
                return;
            end

            SKW = obj.stepParams.SKW;
            if ~isfield(SKW,'transformMethod')
                descStr = sprintf('[%s] SkewCorr: transformMethod undefined.', obj.name);
                return;
            end

            % Start building the string
            descStr = sprintf('[%s] Skewness Correction [', obj.name);

            % Method
            descStr = sprintf('%s Method: %s', descStr, SKW.transformMethod);

            % Show threshold if present
            if isfield(SKW, 'SkewThr')
                descStr = sprintf('%s, Threshold: %g', descStr, SKW.SkewThr);
            end

            % If Box–Cox or Yeo–Johnson, show lambdas
            switch lower(SKW.transformMethod)
                case 'boxcox'
                    if isfield(SKW,'BoxCoxLambdaType')
                        if strcmpi(SKW.BoxCoxLambdaType,'auto')
                            descStr = sprintf('%s, BoxCox lambda: auto (MLE)', descStr);
                        else
                            lamStr = mat2str(SKW.BoxCoxLambdaVal);
                            descStr = sprintf('%s, BoxCox lambda: manual [%s]', descStr, lamStr);
                        end
                    end
                case 'yeojohnson'
                    if isfield(SKW,'YJLambdaType')
                        if strcmpi(SKW.YJLambdaType,'auto')
                            descStr = sprintf('%s, YJ lambda: auto (MLE)', descStr);
                        else
                            lamStr = mat2str(SKW.YJLambdaVal);
                            descStr = sprintf('%s, YJ lambda: manual [%s]', descStr, lamStr);
                        end
                    end
                otherwise
                    % 'log' => no extra param to show
            end

            descStr = sprintf('%s ]', descStr);
        end

    end % methods
end
